'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

var config_1 = {
  fixed: -1,
  // 保留的精度
  returnString: false,
  // 是否返回string类型的结果
  __returnOrigin: false // 是否不包装直接返回

};
var __key = ['add', 'del'];
var isDebug = true;
var config = {
  config: config_1,
  __key: __key,
  isDebug: isDebug
};

var config$1 = config.config;
var isPosNumber = validate.isPosNumber,
    isEmptyObject = validate.isEmptyObject;
var utils = {
  /**
   * 初始化参数
   * @param options 合并参数，并且进行校验
   * @returns {{}|{returnString: boolean, fixed: number, hex: number}}
   */
  mergeOptions: function mergeOptions(options, oldOptions) {
    if (_typeof(options) !== 'object') {
      console.error("\u914D\u7F6E\u9879\u53C2\u6570".concat(options, "\u4E0D\u5408\u6CD5, \u5C06\u4F7F\u7528\u9ED8\u8BA4\u914D\u7F6E\u9879"));
      return config$1;
    }

    var _options = JSON.parse(JSON.stringify(config$1));

    if (!isEmptyObject(oldOptions)) {
      _options = JSON.parse(JSON.stringify(oldOptions));
    }

    for (var key in options) {
      var item = options[key]; // 如果配置项不合法，默认使用默认配置

      if (key === 'fixed') {
        _options[key] = !isPosNumber(item) ? config$1[key] : item;
      }

      if (key === 'returnString') {
        _options[key] = typeof item === 'boolean' ? item : config$1[key];
      }
    }

    return _options;
  },

  /**
   * 对结果进行包装
   * @param res 结果
   * @param options 配置项
   * @returns {string|Number} 显示的结果
   */
  packResult: function packResult(res, options) {
    if (options.returnOrigin === true) {
      // 是否原样返回，用于累计运算中
      return res;
    }

    utils._console.log('包装前的结果' + res);

    var fixed = options.fixed,
        returnString = options.returnString;
    var _res = res;
    _res = fixed === -1 ? _res : _res.toFixed(fixed);
    _res = returnString ? _res + '' : _res;

    utils._console.log('最终结果：' + _res);

    return _res;
  },
  _console: function _console() {
    {
      return console;
    }
  }
};
var utils_1 = utils;

var _console = utils_1._console;
var validate = {
  /**
   * 校验参数计算参数是否合法
   * @param arr
   * @param isMergeTotal 是否是累计运算
   * @returns {[]|*[]}
   */
  mergeArgumentsIsNumber: function mergeArgumentsIsNumber(arr, isMergeTotal) {
    if (!Array.isArray(arr)) {
      console.error('入参不合法');
      return [];
    }

    var _arr = [];
    var len = isMergeTotal === true ? arr.length : 2;

    try {
      // 去除最后一个参数精度
      for (var i = 0; i < len; i++) {
        var _item = arr[i];

        if (typeof _item === 'number') {
          _arr.push(arr[i]);
        } else if (typeof _item === 'string') {
          // 有一些猪一样的后台喜欢把数字反成字符串
          var _temp = Number(arr[i]);

          if (isNaN(_temp)) {
            console.error('字符串转换数字失败，转换结果魏NaN');
          } else {
            _arr.push(Number(arr[i]));
          }
        } else {
          console.error("illegal arguments at position ".concat(i, ", because of ").concat(_item, " is not string or number"));
          return [];
        }
      }
    } catch (e) {
      console.error('参数解析报错', e);
    }

    _console.log('_arr', _arr);

    return _arr;
  },
  isPosNumber: function isPosNumber(number) {
    // 是否是0和正整数
    return /^(0|\+?[1-9][0-9]*)$/.test(number);
  },
  isEmptyObject: function isEmptyObject(obj) {
    for (var key in obj) {
      return false;
    }

    return true;
  }
};

var packResult = utils_1.packResult;
var _core = {
  _add: function _add(a, b, options) {
    var _a, _b;

    try {
      _a = (a.toString().split('.')[1] || '').length;
    } catch (e) {
      _a = 0;
    }

    try {
      _b = (b.toString().split('.')[1] || '').length;
    } catch (e) {
      _b = 0;
    }

    var _base = Math.pow(10, Math.max(_a, _b));

    var res = (a * _base + b * _base) / _base;
    return packResult(res, options);
  },

  /**
   * 累计运算
   * @param arr 带计算的数组
   * @param key 带计算的方法
   * @param options
   * @returns {string|Number}
   * @private
   */
  _total: function _total(arr, key, options) {
    var res = arr[0];
    var len = arr.length;

    for (var j = 1; j < len; j++) {
      if (key === '_sub') {
        res = _core._add(res, -arr[j], _objectSpread2({}, options, {}, {
          returnOrigin: true
        }));
      } else {
        res = _core[key](res, arr[j], _objectSpread2({}, options, {}, {
          returnOrigin: true
        }));
      }
    }

    return packResult(res, options);
  },
  _mul: function _mul(a, b, options) {
    var _base = 0;

    try {
      _base += a.toString().split(".")[1].length;
    } catch (e) {}

    try {
      _base += b.toString().split(".")[1].length;
    } catch (e) {}

    var r1 = Number(a.toString().replace(".", ""));
    var r2 = Number(b.toString().replace(".", ""));
    var res = r1 * r2 / Math.pow(10, _base);
    return packResult(res, options);
  },
  _div: function _div(a, b, options) {
    var t1, t2;

    try {
      t1 = a.toString().split(".")[1].length;
    } catch (e) {} //--小数点后的长度


    try {
      t2 = b.toString().split(".")[1].length;
    } catch (e) {} //--小数点后的长度


    var r1 = Number(a.toString().replace(".", "")); //--去除小数点变整数

    var r2 = Number(b.toString().replace(".", "")); //--去除小数点变整数

    var res = r1 / r2 * Math.pow(10, t2 - t1);
    return packResult(res, options); //---整数相除 在乘上10的平方  小数点的长度
  }
};
var core = _core;

var mergeArgumentsIsNumber = validate.mergeArgumentsIsNumber;
var mergeOptions = utils_1.mergeOptions;
var _add = core._add,
    _mul = core._mul,
    _div = core._div,
    _total = core._total;
var __global = {};

function Calc(options) {
  __global.options = this._options = mergeOptions(options, __global.options); // 合并配置项

  this._chain = {
    /**
     * 设置链头
     * @param number
     */
    setChainRes: function setChainRes(number) {
      this.chainRes = number;
    },
    chainRes: 0,
    getChainRes: function getChainRes() {
      return this.chainRes;
    }
  };

  this.val = function () {
    return this._chain.getChainRes();
  };

  return this;
}
/**
     * 两个数的加法
     * @param a
     * @param b
     * @param options 配置
     * @returns {*}
     */


Calc.prototype.add = function (a, b) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var _options = mergeOptions(options, __global.options);

  var _arguments = mergeArgumentsIsNumber(Array.prototype.slice.call(arguments));

  return _add(_arguments[0], _arguments[1], _options);
};
/**
     * 两个数的减法
     * @param a
     * @param b
     * @param fixed 保留几位小数
     * @returns {*}
     */


Calc.prototype.sub = function (a, b) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var _options = mergeOptions(options, __global.options);

  var _arguments = mergeArgumentsIsNumber(Array.prototype.slice.call(arguments)); // 减法相当于加上b的负数


  return _add(_arguments[0], -_arguments[1], _options);
};
/**
 * 两个数的乘法
 * @param a
 * @param b
 * @param options
 * @returns {*}
 */


Calc.prototype.mul = function (a, b) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var _options = mergeOptions(options, __global.options);

  var _arguments = mergeArgumentsIsNumber(Array.prototype.slice.call(arguments));

  return _mul(_arguments[0], _arguments[1], _options);
};
/**
 * 两个数的除法
 * @param a
 * @param b
 * @param options
 * @returns {*|undefined}
 */


Calc.prototype.div = function (a, b) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var _options = mergeOptions(options, __global.options);

  var _arguments = mergeArgumentsIsNumber(Array.prototype.slice.call(arguments));

  return _div(_arguments[0], _arguments[1], _options);
};

Calc.prototype.adds = function (arr) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _options = mergeOptions(options, __global.options);

  var _arguments = mergeArgumentsIsNumber(arr, true);

  return _total(_arguments, '_add', _options);
};

Calc.prototype.subs = function (arr) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _options = mergeOptions(options, __global.options);

  var _arguments = mergeArgumentsIsNumber(arr, true);

  return _total(_arguments, '_sub', _options);
};

Calc.prototype.muls = function (arr) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _options = mergeOptions(options, __global.options);

  var _arguments = mergeArgumentsIsNumber(arr, true);

  return _total(_arguments, '_mul', _options);
};

Calc.prototype.divs = function (arr) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _options = mergeOptions(options, __global.options);

  var _arguments = mergeArgumentsIsNumber(arr, true);

  return _total(_arguments, '_div', _options);
};

function chain(initNumber) {
  var _arguments = mergeArgumentsIsNumber([initNumber, 0.01]);

  var _super = new Calc();

  _super._chain.setChainRes(_arguments[0]);

  return _super;
}

Calc.prototype.cAdd = function (number) {
  var _this = this;

  var _options = mergeOptions({}, __global.options);

  var _arguments = mergeArgumentsIsNumber([number, 0.01], true);

  var _params0 = _this._chain.getChainRes();

  var _params1 = _arguments[0];

  var _res = _add(_params0, _params1, _objectSpread2({}, _options, {}, {
    returnOrigin: true
  }));

  _this._chain.setChainRes(_res);

  return this;
};

var Calc_1 = Calc;
var chain_1 = chain;
var add = Calc.prototype.add;
var mul = Calc.prototype.mul;
var sub = Calc.prototype.sub;
var div = Calc.prototype.div;
var adds = Calc.prototype.adds;
var subs = Calc.prototype.subs;
var muls = Calc.prototype.muls;
var divs = Calc.prototype.divs;
var src = {
  Calc: Calc_1,
  chain: chain_1,
  add: add,
  mul: mul,
  sub: sub,
  div: div,
  adds: adds,
  subs: subs,
  muls: muls,
  divs: divs
};

exports.Calc = Calc_1;
exports.add = add;
exports.adds = adds;
exports.chain = chain_1;
exports.default = src;
exports.div = div;
exports.divs = divs;
exports.mul = mul;
exports.muls = muls;
exports.sub = sub;
exports.subs = subs;
